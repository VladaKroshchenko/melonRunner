//
//  ContentView.swift
//  melonRunner
//
//  Created by Kroshchenko Vlada on 29.07.2025.
//

import SwiftUI
import MapKit
import CoreLocation
import HealthKit

struct ContentView: View {
    @StateObject private var viewModel = RunningViewModel()

    var body: some View {
        ZStack(alignment: .bottom) {
            // –ö–∞—Ä—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∞—Ä—à—Ä—É—Ç–æ–º
            Map(position: $viewModel.cameraPosition) {
                // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if let userCoordinate = viewModel.currentUserCoordinate {
                    Annotation("", coordinate: userCoordinate) {
                        Image(systemName: "person.circle.fill")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 30, height: 30)
                            .foregroundStyle(.yellow)
                            .background(.white)
                            .clipShape(Circle())
                            .shadow(radius: 2)
                    }
                }
                // –ú–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–±–µ–∂–∫–∏
                if viewModel.routeCoordinates.count > 1 {
                    MapPolyline(coordinates: viewModel.routeCoordinates)
                        .stroke(.yellow, lineWidth: 6.0)
                }
            }
            .mapStyle(.standard)
            .mapControlVisibility(.visible)
            .ignoresSafeArea()

            if !viewModel.isRunning {
                VStack {
                    HStack {
                        Button(action: {
                            print("Back pressed") // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏
                        }) {
                            Image(systemName: "chevron.left")
                                .font(.title2)
                                .padding()
                                .background(.white.opacity(0.9))
                                .clipShape(Circle())
                                .shadow(radius: 2)
                        }
                        Spacer()
                    }
                    Spacer()
                }
                .padding(.leading, 20)
            }

            // –ü–∞–Ω–µ–ª—å —Å –º–µ—Ç–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            VStack(spacing: 20) {
                // –ú–µ—Ç–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–∞–ª–æ—Ä–∏–π
                VStack(spacing: 10) {
                    Text("‚è±Ô∏è –í—Ä–µ–º—è: \(viewModel.formattedTime)")
                        .font(.title2)
                        .foregroundStyle(.black)
                    Text("üë£ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: \(String(format: "%.0f", viewModel.totalDistance / 1000)) –∫–º")
                        .font(.title2)
                        .foregroundStyle(.black)
                    Text("üî• –ö–∞–ª–æ—Ä–∏–∏: \(String(format: "%.0f", viewModel.calories)) –∫–∫–∞–ª")
                        .font(.title2)
                        .foregroundStyle(.black)

                }
                .padding()
                .background(.white.opacity(0.9))
                .clipShape(RoundedRectangle(cornerRadius: 12))
                .shadow(radius: 5)

                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if !viewModel.isRunning {
                    // –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç" –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–µ–∂–∫–∏
                    Button(action: {
                        viewModel.startRun()
                    }) {
                        Text("–°—Ç–∞—Ä—Ç")
                            .font(.title3)
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(.green)
                            .foregroundStyle(.white)
                            .clipShape(RoundedRectangle(cornerRadius: 10))
                    }
                    .padding(.horizontal)
                } else {
                    // –ö–Ω–æ–ø–∫–∏ "–ü–∞—É–∑–∞"/"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–±–µ–∂–∫–∏
                    HStack(spacing: 10) {
                        Button(action: {
                            viewModel.pauseRun()
                        }) {
                            Text(viewModel.isPaused ? "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" : "–ü–∞—É–∑–∞")
                                .font(.title3)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(viewModel.isPaused ? .green : .cyan)
                                .foregroundStyle(.white)
                                .clipShape(RoundedRectangle(cornerRadius: 10))
                        }

                        Button(action: {
                            viewModel.stopRun()
                        }) {
                            Text("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
                                .font(.title3)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(.red)
                                .foregroundStyle(.white)
                                .clipShape(RoundedRectangle(cornerRadius: 10))
                        }
                    }
                    .padding(.horizontal)
                }
            }
            .padding(.bottom, 20)
        }
        .onAppear {
            viewModel.requestPermissions()
        }
    }
}

// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π
class RunningViewModel: NSObject, ObservableObject, CLLocationManagerDelegate {
    @Published var cameraPosition: MapCameraPosition = .region(
        MKCoordinateRegion(
            center: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194),
            span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
        )
    )
    @Published var locations: [CLLocation] = []
    @Published var routeCoordinates: [CLLocationCoordinate2D] = []
    @Published var currentUserCoordinate: CLLocationCoordinate2D? // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    @Published var totalDistance: Double = 0.0
    @Published var formattedTime: String = "00:00:00"
    @Published var calories: Double = 0.0
    @Published var isRunning: Bool = false
    @Published var isPaused: Bool = false

    private let locationManager = CLLocationManager()
    private let healthStore = HKHealthStore()
    private var startTime: Date?
    private var pauseTime: Date?
    private var accumulatedTime: TimeInterval = 0.0
    private var timer: Timer?
    private var calorieQuery: HKStatisticsCollectionQuery?

    override init() {
        super.init()
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.allowsBackgroundLocationUpdates = true
    }

    func requestPermissions() {
        locationManager.requestWhenInUseAuthorization()
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        if CLLocationManager.locationServicesEnabled() {
            locationManager.startUpdatingLocation()
        }

        guard HKHealthStore.isHealthDataAvailable() else { return }
        let typesToRead: Set = [HKObjectType.quantityType(forIdentifier: .activeEnergyBurned)!]
        healthStore.requestAuthorization(toShare: nil, read: typesToRead) { success, error in
            if !success {
                print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HealthKit: \(error?.localizedDescription ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
            }
        }
    }

    func startRun() {
        isRunning = true
        isPaused = false
        startTime = Date()
        accumulatedTime = 0.0
        locations.removeAll()
        routeCoordinates.removeAll()
        totalDistance = 0.0
        calories = 0.0
        formattedTime = "00:00:00"
        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] _ in
            self?.updateTimer()
        }
        startCalorieUpdates()
    }

    func pauseRun() {
        isPaused.toggle()
        if isPaused {
            timer?.invalidate()
            pauseTime = Date()
            stopCalorieUpdates()
        } else {
            guard let pauseTime = pauseTime else { return }
            accumulatedTime += pauseTime.timeIntervalSince(startTime ?? pauseTime)
            startTime = Date()
            timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] _ in
                self?.updateTimer()
            }
            startCalorieUpdates()
        }
    }

    func stopRun() {
        isRunning = false
        isPaused = false
        timer?.invalidate()
        stopCalorieUpdates()
        fetchCalories() // –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    }

    private func updateTimer() {
        guard let startTime = startTime else { return }
        let currentTime = accumulatedTime + Date().timeIntervalSince(startTime)
        let hours = Int(currentTime) / 3600
        let minutes = (Int(currentTime) % 3600) / 60
        let seconds = Int(currentTime) % 60
        formattedTime = String(format: "%02d:%02d:%02d", hours, minutes, seconds)
    }

    private func startCalorieUpdates() {
        guard let energyType = HKObjectType.quantityType(forIdentifier: .activeEnergyBurned) else { return }
        guard let startTime = startTime else { return }

        let predicate = HKQuery.predicateForSamples(withStart: startTime, end: nil, options: .strictStartDate)
        let query = HKStatisticsCollectionQuery(
            quantityType: energyType,
            quantitySamplePredicate: predicate,
            options: .cumulativeSum,
            anchorDate: startTime,
            intervalComponents: DateComponents(second: 10) // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        )

        query.initialResultsHandler = { [weak self] query, collection, error in
            self?.updateCalories(from: collection)
        }

        query.statisticsUpdateHandler = { [weak self] query, statistics, collection, error in
            self?.updateCalories(from: collection)
        }

        healthStore.execute(query)
        calorieQuery = query
    }

    private func updateCalories(from collection: HKStatisticsCollection?) {
        guard let collection = collection, let startTime = startTime else { return }
        let now = Date()
        // –°—É–º–º–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç startTime –¥–æ now
        var totalCalories: Double = 0.0
        collection.enumerateStatistics(from: startTime, to: now) { statistics, _ in
            if let sum = statistics.sumQuantity() {
                totalCalories += sum.doubleValue(for: HKUnit.kilocalorie())
            }
        }
        DispatchQueue.main.async { [weak self] in
            self?.calories = totalCalories
        }
    }

    private func stopCalorieUpdates() {
        if let query = calorieQuery {
            healthStore.stop(query)
            calorieQuery = nil
        }
    }

    private func fetchCalories() {
        guard let energyType = HKObjectType.quantityType(forIdentifier: .activeEnergyBurned) else { return }
        let now = Date()
        let startOfRun = startTime ?? now
        let predicate = HKQuery.predicateForSamples(withStart: startOfRun, end: now, options: .strictStartDate)

        let query = HKStatisticsQuery(quantityType: energyType, quantitySamplePredicate: predicate, options: .cumulativeSum) { [weak self] _, result, error in
            if let sum = result?.sumQuantity() {
                let calories = sum.doubleValue(for: HKUnit.kilocalorie())
                DispatchQueue.main.async {
                    self?.calories = calories
                }
            }
        }
        healthStore.execute(query)
    }

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let newLocation = locations.last else { return }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
        DispatchQueue.main.async { [weak self] in
            self?.currentUserCoordinate = newLocation.coordinate
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–±–µ–∂–∫–∏
        if isRunning && !isPaused {
            self.locations.append(newLocation)
            DispatchQueue.main.async { [weak self] in
                self?.routeCoordinates = self?.locations.map { $0.coordinate } ?? []

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                if let locations = self?.locations, locations.count > 1 {
                    let lastLocation = locations[locations.count - 2]
                    self?.totalDistance += newLocation.distance(from: lastLocation)
                }
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        DispatchQueue.main.async { [weak self] in
            self?.cameraPosition = .region(
                MKCoordinateRegion(
                    center: newLocation.coordinate,
                    latitudinalMeters: 500,
                    longitudinalMeters: 500
                )
            )
        }
    }

    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: \(error.localizedDescription)")
    }

    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        if manager.authorizationStatus == .authorizedWhenInUse || manager.authorizationStatus == .authorizedAlways {
            locationManager.startUpdatingLocation()
        }
    }
}

// –ü—Ä–µ–≤—å—é –¥–ª—è SwiftUI
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
